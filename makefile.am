FwalDIST_SUBDIRS = secp256k1
AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS)
CXXFLAGS += -std=c++0x

CPPFLAGS += -Wno-deprecated-declarations -Wno-unused-local-typedefs -Wno-unused-result -DBOOST_SYSTEM_NO_DEPRECATED=1 

if EMBEDDED_LEVELDB
LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/include
LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/helpers/memenv
LEVELDB_CPPFLAGS += -Wno-deprecated
LIBLEVELDB += $(builddir)/leveldb/libleveldb.a
LIBMEMENV  += $(builddir)/leveldb/libmemenv.a

# NOTE: This dependency is not strictly necessary, but without it make may try to build both in parallel, which breaks the LevelDB build system in a race
$(LIBLEVELDB): $(LIBMEMENV)

$(LIBLEVELDB) $(LIBMEMENV):
	@echo "Building LevelDB ..." && $(MAKE) -C $(@D) $(@F) CXX="$(CXX)" \
	  CC="$(CC)" PLATFORM=$(TARGET_OS) AR="$(AR)" $(LEVELDB_TARGET_FLAGS) \
          OPT="$(CXXFLAGS) $(CPPFLAGS)"
endif

FFF_CONFIG_INCLUDES=-I$(builddir)/config
FFF_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)

FFF_INCLUDES += -I$(srcdir)/secp256k1/include

LIBFFF_ENTERPRISE=libFFF_enterprise.a
LIBFFF_COMMUNITY=libFFF_community.a
LIBFFF_SERVER=libFFF_server.a
LIBFFF_WALLET=libFFF_wallet.a
LIBFFF_COMMON=libFFF_common.a
LIBFFF_CLI=libFFF_cli.a
LIBFFF_UTIL=libFFF_util.a
LIBFFF_CRYPTO=crypto/libFFF_crypto.a
LIBFFF_FFF_Core=FFF_Core/libFFF_FFF_Core.a
LIBFFF_UNIVALUE=univalue/libFFF_univalue.a
LIBFFFQT=qt/libFFFqt.a
LIBSECP256K1=secp256k1/libsecp256k1.la
if !TARGET_WINDOWS
LIBFFF_V8=libFFF_v8.a
endif

$(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)

# Make is not made aware of per-object dependencies to avoid limiting building parallelization
# But to build the less dependent modules first, we manually select their order here:
EXTRA_LIBRARIES = \
  crypto/libFFF_crypto.a \
  FFF_Core/libFFF_FFF_Core.a \
  libFFF_util.a \
  libFFF_common.a \
  univalue/libFFF_univalue.a \
  libFFF_enterprise.a \
  libFFF_community.a \
  libFFF_server.a \
  libFFF_cli.a
if ENABLE_WALLET
FFF_INCLUDES += $(BDB_CPPFLAGS)
EXTRA_LIBRARIES += libFFF_wallet.a
endif
if !TARGET_WINDOWS
EXTRA_LIBRARIES += $(LIBFFF_V8)
endif
if BUILD_FFF_LIBS
lib_LTLIBRARIES = libFFFconsensus.la
LIBFFF_CONSENSUS=libFFFconsensus.la
else
LIBFFF_CONSENSUS=
endif

bin_PROGRAMS =
TESTS =

if BUILD_FFFD
#  bin_PROGRAMS += FFFd FFF_Cored						# MCHN
  bin_PROGRAMS += FFF_Cored FFF_Cored-cold					# MCHN
endif

if BUILD_FFF_UTILS
#  bin_PROGRAMS += FFF_Core-util FFF_Core-cli FFF-cli FFF-tx		# MCHN
  bin_PROGRAMS += FFF_Core-util FFF_Core-cli 		# MCHN
endif

.PHONY: FORCE
# FFF core #
FFF_CORE_H = \
  storage/addrman.h \
  structs/alert.h \
  utils/allocators.h \
  structs/amount.h \
  structs/base58.h \
  structs/bloom.h \
  chain/chain.h \
  chainparams/chainparams.h \
  chainparams/chainparamsbase.h \
  chainparams/chainparamsseeds.h \
  chain/checkpoints.h \
  checkqueue.h \
  version/clientversion.h \
  coincontrol.h \
  storage/coins.h \
  utils/compat.h \
  utils/compressor.h \
  primitives/block.h \
  primitives/transaction.h \
  utils/core_io.h \
  wallet/crypter.h \
  wallet/dbflat.h \
  wallet/db.h \
  wallet/dbwrap.h \
  structs/hash.h \
  core/init.h \
  keys/key.h \
  wallet/keystore.h \
  storage/leveldbwrapper.h \
  structs/limitedmap.h \
  core/main.h \
  chain/merkleblock.h \
  miner/miner.h \
  utils/mruset.h \
  net/netbase.h \
  net/net.h \
  ui/noui.h \
  chain/pow.h \
  protocol/netprotocol.h \
  keys/pubkey.h \
  utils/random.h \
  utils/utilparse.h \
  rpc/rpcclient.h \
  rpc/rpcprotocol.h \
  rpc/rpcasio.h \
  rpc/rpcutils.h \
  rpc/rpcwallet.h \
  rpc/rpcserver.h \
  script/interpreter.h \
  script/interpreter.h \
  script/script.h \
  script/sigcache.h \
  script/sign.h \
  script/standard.h \
  script/script_error.h \
  utils/serialize.h \
  utils/streams.h \
  utils/sync.h \
  utils/threadsafety.h \
  utils/timedata.h \
  utils/tinyformat.h \
  storage/txdb.h \
  chain/txmempool.h \
  ui/ui_interface.h \
  structs/uint256.h \
  chain/undo.h \
  utils/util.h \
  utils/utilstrencodings.h \
  utils/utilmoneystr.h \
  utils/utiltime.h \
  version/bcversion.h \
  wallet/wallet.h \
  wallet/wallettxs.h \
  wallet/wallet_ismine.h \
  wallet/walletdb.h \
  compat/sanity.h

JSON_H = \
  json/json_spirit.h \
  json/json_spirit_error_position.h \
  json/json_spirit_reader.h \
  json/json_spirit_reader_template.h \
  json/json_spirit_stream_reader.h \
  json/json_spirit_utils.h \
  json/json_spirit_value.h \
  json/json_spirit_writer.h \
  json/json_spirit_writer_template.h \
  json_spirit_ubjson.h

obj/build.h: FORCE
	@$(MKDIR_P) $(builddir)/obj
	@$(top_srcdir)/share/genbuild.sh $(abs_top_builddir)/src/obj/build.h \
	  $(abs_top_srcdir)
libFFF_util_a-clientversion.$(OBJEXT): obj/build.h

libFFF_community_a_CPPFLAGS = $(FFF_INCLUDES)
libFFF_community_a_SOURCES = \
  community/community.cpp \
  wallet/db.cpp \
  wallet/dbwrap_com.cpp

if ENABLE_ENTERPRISE
include entMakefile.am
else
libFFF_enterprise_a_CPPFLAGS = $(FFF_INCLUDES)
libFFF_enterprise_a_SOURCES = \
  community/community.cpp \
  wallet/db.cpp \
  wallet/dbwrap_com.cpp
endif

# server: shared between FFFd and FFF-qt
libFFF_server_a_CPPFLAGS = $(FFF_INCLUDES) $(MINIUPNPC_CPPFLAGS)
libFFF_server_a_SOURCES = \
  storage/addrman.cpp \
  structs/alert.cpp \
  structs/bloom.cpp \
  chain/chain.cpp \
  chain/checkpoints.cpp \
  core/init.cpp \
  storage/leveldbwrapper.cpp \
  core/main.cpp \
  protocol/FFF_Coretx.cpp \
  protocol/FFF_Coreblock.cpp \
  custom/custom_server.cpp \
  filters/FFF_Corefilter.cpp \
  protocol/relay.cpp \
  protocol/handshake.cpp \
  chain/merkleblock.cpp \
  miner/miner.cpp \
  net/net.cpp \
  ui/noui.cpp \
  chain/pow.cpp \
  net/rest.cpp \
  utils/utilparse.cpp \
  json/json_spirit_ubjson.cpp \
  rpc/rpcrawdata.cpp \
  rpc/rpcutils.cpp \
  rpc/rpccache.cpp \
  rpc/rpcchunks.cpp \
  rpc/rpcdebug.cpp \
  rpc/rpchelp.cpp \
  rpc/rpcblockchain.cpp \
  rpc/rpcmining.cpp \
  rpc/rpcmisc.cpp \
  rpc/rpcnet.cpp \
  rpc/rpcrawtransaction.cpp \
  rpc/rpcfeeds.cpp \
  rpc/rpcserver.cpp \
  script/sigcache.cpp \
  utils/timedata.cpp \
  storage/txdb.cpp \
  chain/txmempool.cpp \
  $(JSON_H) \
  $(FFF_CORE_H)

# wallet: shared between FFFd and FFF-qt, but only linked
# when wallet enabled
libFFF_wallet_a_CPPFLAGS = $(FFF_INCLUDES)
libFFF_wallet_a_SOURCES = \
  wallet/dbflat.cpp \
  wallet/crypter.cpp \
  community/license.cpp \
  rpc/rpcdump.cpp \
  rpc/rpcwallet.cpp \
  rpc/rpcwalletutils.cpp \
  rpc/rpcwallettxs.cpp \
  rpc/rpcexchange.cpp \
  rpc/rpcwalletsend.cpp \
  rpc/rpcpermissions.cpp \
  rpc/rpcassets.cpp \
  rpc/rpcstreams.cpp \
  rpc/rpcupgrades.cpp \
  rpc/rpcfilters.cpp \
  rpc/rpcvariables.cpp \
  rpc/rpclibraries.cpp \
  rpc/rpclicense.cpp \
  rpc/rpcexplorer.cpp \
  wallet/wallet.cpp \
  wallet/walletcoins.cpp \
  wallet/wallettxs.cpp \
  wallet/wallet_ismine.cpp \
  wallet/walletdb.cpp \
  $(FFF_CORE_H)

# crypto primitives library
crypto_libFFF_crypto_a_CPPFLAGS = $(FFF_CONFIG_INCLUDES)
crypto_libFFF_crypto_a_SOURCES = \
  crypto/sha1.cpp \
  crypto/sha256.cpp \
  crypto/sha512.cpp \
  crypto/hmac_sha256.cpp \
  crypto/hmac_sha512.cpp \
  crypto/ripemd160.cpp \
  crypto/common.h \
  crypto/sha256.h \
  crypto/sha512.h \
  crypto/hmac_sha256.h \
  crypto/hmac_sha512.h \
  crypto/sha1.h \
  crypto/ripemd160.h




# FFF_Core library
FFF_Core_libFFF_FFF_Core_a_CPPFLAGS = $(FFF_CONFIG_INCLUDES)
FFF_Core_libFFF_FFF_Core_a_SOURCES = \
  utils/utility.cpp \
  utils/systemdependent.cpp \
  utils/tools.cpp \
  utils/utilwrapper.cpp \
  version/version.cpp \
  custom/custom.cpp \
  custom/custom_FFF_Core.cpp \
  chainparams/params.cpp \
  protocol/FFF_Corescript.cpp \
  utils/dbwrapper.cpp \
  wallet/wallettxdb.cpp \
  wallet/chunkdb.cpp \
  wallet/chunkcollector.cpp \
  permissions/permission.cpp \
  entities/asset.cpp

# univalue JSON library
univalue_libFFF_univalue_a_SOURCES = \
  univalue/univalue.cpp \
  univalue/univalue_read.cpp \
  univalue/univalue_write.cpp \
  univalue/univalue_escapes.h \
  univalue/univalue.h

# common: shared between FFFd, and FFF-qt and non-server tools
libFFF_common_a_CPPFLAGS = $(FFF_INCLUDES)
libFFF_common_a_SOURCES = \
  utils/allocators.cpp \
  structs/amount.cpp \
  structs/base58.cpp \
  chainparams/chainparams.cpp \
  storage/coins.cpp \
  utils/compressor.cpp \
  primitives/block.cpp \
  primitives/transaction.cpp \
  utils/core_read.cpp \
  utils/core_write.cpp \
  structs/hash.cpp \
  keys/key.cpp \
  wallet/keystore.cpp \
  net/netbase.cpp \
  protocol/netprotocol.cpp \
  keys/pubkey.cpp \
  script/interpreter.cpp \
  script/script.cpp \
  script/sign.cpp \
  script/standard.cpp \
  script/script_error.cpp \
  $(FFF_CORE_H)

# util: shared between all executables.
# This library *must* be included to make sure that the glibc
# backward-compatibility objects and their sanity checks are linked.
libFFF_util_a_CPPFLAGS = $(FFF_INCLUDES)
libFFF_util_a_SOURCES = \
  compat/strnlen.cpp \
  compat/glibc_sanity.cpp \
  compat/glibcxx_sanity.cpp \
  chainparams/chainparamsbase.cpp \
  version/clientversion.cpp \
  utils/random.cpp \
  rpc/rpcprotocol.cpp \
  utils/sync.cpp \
  structs/uint256.cpp \
  utils/util.cpp \
  utils/utilstrencodings.cpp \
  utils/utilmoneystr.cpp \
  utils/utiltime.cpp \
  $(FFF_CORE_H)

if GLIBC_BACK_COMPAT
libFFF_util_a_SOURCES += compat/glibc_compat.cpp
libFFF_util_a_SOURCES += compat/glibcxx_compat.cpp
endif

# cli: shared between FFF-cli and FFF-qt
libFFF_cli_a_CPPFLAGS = $(FFF_INCLUDES)
libFFF_cli_a_SOURCES = \
  rpc/rpcclient.cpp \
  $(FFF_CORE_H)

nodist_libFFF_util_a_SOURCES = $(srcdir)/obj/build.h
#

# FFFd binary #
#FFFd_LDADD = \
  $(LIBFFF_SERVER) \
  $(LIBFFF_COMMON) \
  $(LIBFFF_UNIVALUE) \
  $(LIBFFF_WALLET) \
  $(LIBFFF_FFF_Core) \
  $(LIBFFF_UTIL) \
  $(LIBFFF_CRYPTO) \
  $(LIBLEVELDB) \
  $(LIBMEMENV) \
  $(LIBSECP256K1)

#if ENABLE_WALLET
#FFFd_LDADD += libFFF_wallet.a
#endif
#FFFd_LDADD += FFF_Core/libFFF_FFF_Core.a
#FFFd_SOURCES = FFFd.cpp chainparams/buildgenesis.cpp
#

if TARGET_WINDOWS
#FFFd_SOURCES += FFFd-res.rc
endif

#FFFd_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)
#FFFd_CPPFLAGS = $(FFF_INCLUDES)
#FFFd_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

# FFF-cli binary #
#FFF_cli_LDADD = \
  $(LIBFFF_CLI) \
  $(LIBFFF_UTIL) \
  $(LIBFFF_FFF_Core) \
  $(LIBFFF_CRYPTO) \
  $(LIBLEVELDB) \
  $(BOOST_LIBS) \
  $(SSL_LIBS) \
  $(CRYPTO_LIBS)

#FFF_cli_SOURCES = \
  FFF-cli.cpp

#FFF_cli_CPPFLAGS = $(FFF_INCLUDES)
#

# FFF-tx binary #
#FFF_tx_LDADD = \
  $(LIBFFF_COMMON) \
  $(LIBFFF_UNIVALUE) \
  $(LIBFFF_FFF_Core) \
  $(LIBFFF_UTIL) \
  $(LIBFFF_CRYPTO) \
  $(LIBLEVELDB) \
  $(LIBSECP256K1) \
  $(BOOST_LIBS) \
  $(CRYPTO_LIBS)

#FFF_tx_SOURCES = FFF-tx.cpp
#FFF_tx_CPPFLAGS = $(FFF_INCLUDES)
#
#FFF_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

if TARGET_WINDOWS
#FFF_cli_SOURCES += FFF-cli-res.rc
endif
#FFF_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

# MCHN START

V8_ROOT = $(top_builddir)/v8build/v8
V8_INCLUDE = -I$(V8_ROOT)/include
V8_LIB_DIR = $(V8_ROOT)/out.gn/x64.release/obj
V8_LIBS = \
    -L$(V8_LIB_DIR) -L$(V8_LIB_DIR)/third_party/icu
if !TARGET_DARWIN
V8_LIBS += \
    -Wl,--start-group
endif
V8_LIBS += \
        -lv8_libbase \
        -lv8_libplatform \
        -lv8_base \
        -lv8_external_snapshot \
        -lv8_libsampler \
        -licuuc \
        -licui18n \
        -lv8_data \
    -ldl
if !TARGET_DARWIN
V8_LIBS += \
    -lrt
endif

libFFF_v8_a_SOURCES = \
  v8/v8engine.cpp \
  v8/v8filter.cpp \
  v8/callbacks.cpp \
  v8/v8json_spirit.cpp

#if TARGET_WINDOWS
#libFFF_v8_a_SOURCES += v8/callbacks_win.cpp v8/v8blob.dpp
#endif

libFFF_v8_a_CPPFLAGS = $(FFF_INCLUDES) $(V8_INCLUDE)

# FFF_Cored binary #
FFF_Cored_LDADD = \
  $(LIBFFF_SERVER) \
  $(LIBFFF_COMMON) \
  $(LIBFFF_UNIVALUE) \
  $(LIBFFF_WALLET) \
  $(LIBFFF_ENTERPRISE) \
  $(LIBFFF_FFF_Core) \
  $(LIBFFF_UTIL) \
  $(LIBFFF_CRYPTO) \
  $(LIBLEVELDB) \
  $(LIBMEMENV) \
  $(LIBSECP256K1)

if TARGET_WINDOWS
  FFF_Cored_LDADD += $(top_builddir)/src/v8_win/build/Release/FFF_Core-v8.lib
else
  FFF_Cored_LDADD += $(LIBFFF_V8)
endif

#if ENABLE_WALLET
#FFF_Cored_LDADD += libFFF_wallet.a
#endif
FFF_Cored_SOURCES = \
    FFF_Core/FFF_Cored.cpp \
    rpc/rpclist.cpp \
    chainparams/buildgenesis.cpp \
    filters/filtercallback.cpp \
    filters/watchdog.cpp \
    json/json_spirit_writer.cpp

if TARGET_WINDOWS
FFF_Cored_SOURCES += filters/filter_win.cpp FFF_Cored-res.rc
else
FFF_Cored_SOURCES += filters/filter.cpp
endif

FFF_Cored_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)
FFF_Cored_CPPFLAGS = $(FFF_INCLUDES) $(V8_INCLUDE)
FFF_Cored_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -pthread
if !TARGET_WINDOWS
FFF_Cored_LDFLAGS += $(V8_LIBS)
endif

# FFF_Cored-cold binary #
FFF_Cored_cold_LDADD = \
  $(LIBFFF_SERVER) \
  $(LIBFFF_COMMON) \
  $(LIBFFF_UNIVALUE) \
  $(LIBFFF_WALLET) \
  $(LIBFFF_COMMUNITY) \
  $(LIBFFF_FFF_Core) \
  $(LIBFFF_UTIL) \
  $(LIBFFF_CRYPTO) \
  $(LIBLEVELDB) \
  $(LIBMEMENV) \
  $(LIBSECP256K1)

#if ENABLE_WALLET
#FFF_Cored_cold_LDADD += libFFF_wallet.a
#endif
FFF_Cored_cold_SOURCES = \
    FFF_Core/FFF_Cored-cold.cpp \
    core/init-cold.cpp \
    rpc/rpclist-cold.cpp \
    chainparams/buildgenesis.cpp \
    filters/filter_cold.cpp \
    filters/filtercallback_cold.cpp \
    filters/watchdog.cpp \
    json/json_spirit_writer.cpp
#

if TARGET_WINDOWS
FFF_Cored_cold_SOURCES += FFF_Cored-cold-res.rc
endif

FFF_Cored_cold_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)
FFF_Cored_cold_CPPFLAGS = $(FFF_INCLUDES)
FFF_Cored_cold_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -pthread

# FFF_Core-cli binary #
FFF_Core_cli_LDADD = \
  $(LIBFFF_CLI) \
  $(LIBFFF_UTIL) \
  $(LIBFFF_FFF_Core) \
  $(LIBFFF_CRYPTO) \
  $(LIBLEVELDB) \
  $(BOOST_LIBS) \
  $(SSL_LIBS) \
  $(CRYPTO_LIBS)

FFF_Core_cli_SOURCES =  FFF_Core/FFF_Core-cli.cpp

FFF_Core_cli_CPPFLAGS = $(FFF_INCLUDES)
#

if TARGET_WINDOWS
FFF_Core_cli_SOURCES += FFF_Core-cli-res.rc
endif
FFF_Core_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

# FFF_Core-util binary #
FFF_Core_util_LDADD = \
  $(LIBFFF_UNIVALUE) \
  $(LIBFFF_FFF_Core) \
  $(LIBFFF_COMMON) \
  $(LIBFFF_UTIL) \
  $(LIBFFF_CRYPTO) \
  $(LIBLEVELDB) \
  $(LIBSECP256K1) \
  $(BOOST_LIBS) \
  $(CRYPTO_LIBS)

FFF_Core_util_SOURCES = FFF_Core/FFF_Core-util.cpp chainparams/buildgenesis.cpp

FFF_Core_util_CPPFLAGS = $(FFF_INCLUDES)
#
if TARGET_WINDOWS
FFF_Core_util_SOURCES += FFF_Core-util-res.rc
endif
FFF_Core_util_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)


# MCHN END




if BUILD_FFF_LIBS
include_HEADERS = script/FFFconsensus.h
libFFFconsensus_la_SOURCES = \
  primitives/transaction.cpp \
  crypto/hmac_sha512.cpp \
  crypto/sha1.cpp \
  crypto/sha256.cpp \
  crypto/sha512.cpp \
  crypto/ripemd160.cpp \
  utils/utility.cpp \
  utils/systemdependent.cpp \
  utils/tools.cpp \
  utils/utilwrapper.cpp \
  chainparams/buildgenesis.cpp \
  version/version.cpp \
  custom/custom.cpp \
  custom/custom_FFF_Core.cpp \
  chainparams/chainparams.cpp \
  protocol/FFF_Corescript.cpp \
  utils/dbwrapper.cpp \
  wallet/wallettxdb.cpp \
  wallet/chunkdb.cpp \
  wallet/chunkcollector.cpp \
  permissions/permission.cpp \
  entities/asset.cpp \
  structs/hash.cpp \
  keys/pubkey.cpp \
  script/script.cpp \
  script/interpreter.cpp \
  script/FFFconsensus.cpp \
  structs/uint256.cpp \
  utils/utilstrencodings.cpp

if GLIBC_BACK_COMPAT
  libFFFconsensus_la_SOURCES += compat/glibc_compat.cpp
  libFFFconsensus_la_SOURCES += compat/glibcxx_compat.cpp
endif

libFFFconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)
libFFFconsensus_la_LIBADD = $(LIBSECP256K1)
libFFFconsensus_la_CPPFLAGS = -I$(builddir)/obj -I$(srcdir)/secp256k1/include -DBUILD_FFF_INTERNAL
endif

CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno

DISTCLEANFILES = obj/build.h

EXTRA_DIST = leveldb

clean-local:
	-$(MAKE) -C leveldb clean
	-$(MAKE) -C secp256k1 clean
	rm -f leveldb/*/*.gcno leveldb/helpers/memenv/*.gcno
	-rm -f config.h

.rc.o:
	@test -f $(WINDRES)
	$(AM_V_GEN) $(WINDRES) -DWINDRES_PREPROC -i $< -o $@

.mm.o:
	$(AM_V_CXX) $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	  $(CPPFLAGS) $(AM_CXXFLAGS) $(QT_INCLUDES) $(CXXFLAGS)  -c -o $@ $<

%.pb.cc %.pb.h: %.proto
	@test -f $(PROTOC)
	$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(abspath $(<D) $<)

#if ENABLE_TESTS
#include Makefile.test.include
#endif

#if ENABLE_QT
#include Makefile.qt.include
#endif

#if ENABLE_QT_TESTS
#include Makefile.qttest.include
#endif
